const CurrentVer = "PAID V6";

const regList = util.promisify(regListCb);
const mainApp = Express();

let key = null;
let cookie = null;

const validKeys = [
  "testerkey",
  "testerkey2",
  "testerkey3",
  "kineroast",
  "adolf",
  "ruthlesssolosuwu"
];

const endpoints = {
  assetDelivery: id => `https://assetdelivery.roblox.com/v1/asset/?id=${id}`,
  publish: (title, description, groupId) =>
    'https://www.roblox.com/ide/publish/uploadnewanimation' +
    '?assetTypeName=Animation' +
    `&name=${encodeURIComponent(title)}` +
    `&description=${encodeURIComponent(description)}` +
    '&AllID=1' +
    '&ispublic=False' +
    '&allowComments=True' +
    '&isGamesAsset=False' +
    (groupId != null ? `&groupId=${groupId}` : '')
};

const RATE_LIMIT_STATUS_CODE = 429;
const DEFAULT_COOLDOWN = 5000; // 5000 milliseconds (5 seconds) cooldown

async function publishAnimationWithCooldown(cookie, csrf, title, description, data, groupId, cooldown) {
  await new Promise(resolve => setTimeout(resolve, cooldown));
  return publishAnimation(cookie, csrf, title, description, data, groupId);
}

async function handleRateLimit(cookie, csrf, title, description, data, groupId, cooldown) {
  console.log('Rate limited. Adding cooldown before retrying...');
  await publishAnimationWithCooldown(cookie, csrf, title, description, data, groupId, cooldown);
}

async function publishAnimationWithRateLimit(cookie, csrf, title, description, data, groupId) {
  try {
    const response = await fetch(endpoints.publish(title, description, groupId), {
      body: data,
      method: 'POST',
      headers: {
        Cookie: `.ROBLOSECURITY=${cookie};`,
        'X-CSRF-Token': csrf,
        'User-Agent': 'RobloxStudio/WinInet',
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'
      }
    });

    if (response.ok) return await response.text();
    else if (response.status === RATE_LIMIT_STATUS_CODE) {
      await handleRateLimit(cookie, csrf, title, description, data, groupId, DEFAULT_COOLDOWN);
    } else {
      throw `${response.status} - ${await response.text()}`;
    }
  } catch (error) {
    console.error(error);
  }
}

async function pullAnimation(id) {
  return await fetch(endpoints.assetDelivery(id)).then(res => res.blob());
}

mainApp.use(bodyParser.json());

const remapped = {};
let workingStill = true;

mainApp.get('/', (req, res) => {
  if (workingStill) return res.json(null);
  res.json(remapped);
  process.exit();
});

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

mainApp.post('/', async (req, res) => {
  const providedKey = req.body.key;
  const selectedmode = req.body.mode;
  const version = req.body.version;

  if (!validKeys.includes(providedKey)) {
    console.log('Invalid key');
    return;
  }

  const cookie = req.body.cookie || (await getRoblosecurity());
  if (!cookie) {
    console.error('Cookie not found/Invalid');
    return;
  }

  await noblox.setCookie(cookie);
  const currentuser = await noblox.getCurrentUser();

  if (!currentuser) {
    console.error('Invalid cookie');
    return;
  }

  console.log('Logged in as', currentuser.UserName);

  if (selectedmode == 'anim') {
    const groupId = req.body.groupID || null;
    const total = parseInt(req.body.total);
    const nameTab = ["abvx", "jdfk", "qwes", "rtop", "zcma", "bqwe", "ahjf", "fhgv", "gqwe", "tsvf", "lmpo", "zxvb", "aplo", "qwye", "nbvc", "yash", "klnm", "mnbv", "opqr", "xyzn", "trew", "jkli", "wqer", "qwas", "vcxz", "bhji", "lqwe", "zxmc", "vbnm", "aqwe", "dhfg", "xtyu", "vcxa", "edfg", "jklp", "ydfg", "lkjh", "erty", "cxza", "tyui", "bnmp", "ploi", "jyhn", "yvbn", "nmkl", "khdf", "xpoi", "vfre", "asdc", "qwaszx", "rtyu", "vgtr", "zxcvb", "xswq", "cdew", "ujnm", "fghj", "oiuy", "yuih", "wqerf", "thju", "jklm", "nbvm", "asdqwe", "hjkl", "poiu", "plkj", "vcdx", "mnb", "gfds", "nbvx", "xzvb", "fdsa", "uiop", "xcvb", "vbn", "xasz", "qweqwe", "zxcf", "asdfg", "bnvc", "mjnh", "gfdsaq", "plok", "cxfd", "mnbvc", "qwedsa", "jhgf", "rty", "vgf", "kjhg", "yhtg", "xse", "fghjk", "vcbn", "xswe", "bnm", "yuiop", "hjklp", "qwsa", "sdfg", "qaz", "wqasd", "zxc", "nbv", "bgfd", "cvbnm", "uytr", "mnbvca", "wqse", "lkjhgf", "zxcv", "bnx", "rtui", "awqe", "rtyui", "aqws", "ytgh", "xcv", "ghjk", "oiuyt", "vbnma", "qweas", "asdf", "oiuyh", "mnbva", "xqwe", "hgfdsa", "vbnmi", "qazx", "plokij", "ghjkl", "ytre", "zxcvas", "bvc", "klmn", "nbvcd", "fghjkl", "zxcvbn", "xsw", "lkj", "bnvx", "uytrf", "werty", "ghfd", "qwerty", "hjklpo", "dfgh", "cxz", "nmklj", "qazws", "uyt", "plmn", "qazwsxedc", "vbnc", "xc", "cghj", "bvcx", "aqw", "zvbn", "yuioplk", "qwer", "dfg", "awq", "rtyuio", "hjk", "qw", "yhg", "fgrtgbr", "abxc", "xznm", "trfv", "qwerf", "yui", "nmklp", "zsxc", "qwera", "hgfd", "poiuyt", "oiuhg", "yhb", "plkm", "aqweqw", "kljh", "zxcvm", "gfdsa", "zxcasd", "yxcvb", "mnvb", "gfdsaqw", "jhy", "mklo", "vnm", "dfrg", "zxcd", "jklh", "lkjhgfds", "qsdf", "ghjklo", "vfdx", "zxvn", "zxcdsa", "jhgfdsa", "qazwsxed", "kloi", "polk", "azxs", "yhgtr", "kjhgfd", "vbnmk", "ytrew", "jklmn", "asxdcf", "bvnm", "fdxs", "kjhy", "xswaq", "poiuh", "vfds", "nmbv", "fdcv", "qwerq", "cvbn", "xaszx", "lkjhgfd", "mnbvcx", "wqas", "vcxzbn", "klpoi", "vcxzsd", "ertyu", "vcxzas", "qwesd", "mlkj", "vcxzml", "vcx", "wqaszx", "vcxznb", "vcxzb", "vcxzasd", "vcxzlk", "vcxzq", "vcxzj", "vcxzm", "vcxzgf", "vcxzs", "vcxzv", "vcxzoi", "vcxzr", "vcxzhy", "vcxzt", "vcxzcv", "vcxzuy", "vcxzp", "vcxzdf", "vcxzxc", "vcxzpl", "vcxzui", "vcxzfg", "vcxzh", "vcxzty", "vcxzbnm", "vcxzwe", "vcxzrt", "vcxzgh", "vcxzjk", "vcxzxcv", "vcxzlkj", "vcxzpoi", "vcxznm", "vcxzqw", "vcxzvf", "vcxzasdf", "vcxzmnb", "vcxzxcvb", "vcxzkl", "vcxzds", "vcxztr", "vcxzgb", "vcxzxcz", "vcxzqwerty", "vcxzxc", "vcxzasx", "vcxzvbn", "vcxzlkjh", "vcxzxcvbn", "vcxzpol", "vcxzjh", "vcxzrty", "vcxznbv", "vcxzqwq", "vcxzuyt", "vcxzgfdsa", "vcxzlkjhg", "vcxzdsaqw", "vcxzasdfg", "vcxzrewq", "vcxzpoiuy", "vcxzxcvb", "vcxznmkl", "vcxzwq", "vcxzasqw", "vcxzxcv", "vcxzxczxc", "vcxzmlkj", "vcxzpoiuyt", "vcxzlkjhf", "vcxznbvc", "vcxzmnbv", "vcxzpoiuytr", "vcxzlkjhgf", "vcxzqwertas", "vcxzlkj", "vcxzlkjhgd", "vcxzgfds", "vcxzn", "vcxzxcvbnm"];    

    console.log('Starting asset download...');
    for (let i = 0; i < total; i++) {
      const id = parseInt(req.body.idTab[i]);

      try {
        remapped[id] = await publishAnimationWithRateLimit(cookie, csrf, nameTab[Math.floor(Math.random() * nameTab.length)], nameTab[Math.floor(Math.random() * nameTab.length)], await pullAnimation(id), groupId);
      } catch (error) {
        console.error(error);
      }
    }

    console.log('Finished publishing animations.');
  }

  workingStill = false;
});

mainApp.listen(6969, () => console.log('Server listening on port 6969.'));
